{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2021-09-30T14:16:51.895Z",
    "end": "2021-09-30T14:17:23.931Z",
    "duration": 32036,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f1462b98-4cf3-47e9-8f37-14f217af8f15",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7c92654d-5621-49b4-95e6-66060c1dd42f",
        "title": "Marbles",
        "fullFile": "/projects/Zowe-DevOps-B-13/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "27ea93a5-5c27-4c93-a891-1489a4057d58",
            "title": "Inventory Manipulation",
            "fullFile": "/projects/Zowe-DevOps-B-13/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Marbles Inventory Manipulation \"before all\" hook",
                "timedOut": false,
                "duration": 4132,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "deleteMarble(COLOR, function(err, data, stderr){\n  if(err){\n    throw err;\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n    done();\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c8ce7a1d-d6a8-409a-935e-cb5ab286c9d5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a single marble with a cost of 1",
                "fullTitle": "Marbles Inventory Manipulation should create a single marble with a cost of 1",
                "timedOut": false,
                "duration": 4200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Create marble\ncreateMarble(COLOR, 1, 1, function(err, data, stderr){\n  if(err){\n    throw err;\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n    // Strip unwanted whitespace/newline\n    data = data.trim();\n    assert.equal(data, \"+SUCCESS\", \"Unsuccessful marble creation\");\n    getMarbleQuantity(COLOR, function(err, quantity, cost){\n      if(err){\n        throw err;\n      }\n      assert.equal(quantity, 1, \"Inventory is not as expected\");\n      assert.equal(cost, 1, \"Inventory is not as expected\");\n      done();\n    });\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "84f7b09a-5025-4c9b-a1d8-869ebd31f4b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a marble of a color that already exists",
                "fullTitle": "Marbles Inventory Manipulation should not create a marble of a color that already exists",
                "timedOut": false,
                "duration": 4242,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Create marble\ncreateMarble(COLOR, 2, 1, function(err, data, stderr){\n  if(err){\n    throw err\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n    // Strip unwanted whitespace/newline\n    data = data.trim();\n    assert.equal(data, \"+MARB002E Color (\" + COLOR + \") already exists, UPDate or DELete it.\", \"Unexpected marble creation or incorrect error message\");\n    // Confirm quantity is unchanged\n    getMarbleQuantity(COLOR, function(err, quantity, cost){\n      if(err){\n        throw err;\n      }\n      assert.equal(quantity, 1, \"Inventory is not as expected\");\n      assert.equal(cost, 1, \"Cost is not as expected\");\n      done();\n    });\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e044d7b6-5233-4d93-88c9-d10a14beb01b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update marble inventory",
                "fullTitle": "Marbles Inventory Manipulation should update marble inventory",
                "timedOut": false,
                "duration": 4067,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Update marble\nupdateMarble(COLOR, 2, function(err, data, stderr){\n  if(err){\n    throw err\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n    // Strip unwanted whitespace/newline\n    data = data.trim();\n    assert.equal(data, \"+SUCCESS\", \"Unsuccessful marble update\");\n    // Marble inventory should be updated\n    getMarbleQuantity(COLOR, function(err, quantity){\n      if(err){\n        throw err;\n      }\n      assert.equal(quantity, 2, \"Inventory is not as expected\");\n      done();\n    });\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cdf73358-259e-4606-a348-dba7ea326bf5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the marble color from inventory",
                "fullTitle": "Marbles Inventory Manipulation should delete the marble color from inventory",
                "timedOut": false,
                "duration": 6198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Delete marble\ndeleteMarble(COLOR, function(err, data, stderr){\n  if(err){\n    throw err\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n    // Strip unwanted whitespace/newline\n    data = data.trim();\n    assert.equal(data, \"+SUCCESS\", \"Unsuccessful marble deletion\");\n    //Marble should be removed from inventory\n    getMarbleQuantity(COLOR, function(err, quantity){\n      if(err){\n        throw err;\n      }\n      assert.equal(quantity, null, \"Inventory is not as expected\");\n      done();\n    });\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4e2234bb-6e09-4da1-9e53-98e1c9b22022",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not be able to \"redelete\" the marble color from inventory",
                "fullTitle": "Marbles Inventory Manipulation should not be able to \"redelete\" the marble color from inventory",
                "timedOut": false,
                "duration": 5053,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Try to delete marble again\ndeleteMarble(COLOR, function(err, data, stderr){\n  if(err){\n    throw err\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n    // Strip unwanted whitespace/newline\n    data = data.trim();\n    assert.equal(data, \"+MARB001E Color (\" + COLOR + \") not found in inventory, CREate it.\", \"Unexpected marble redeletion or incorrect error message\");\n    // Marble should still not be in inventory\n    getMarbleQuantity(COLOR, function(err, quantity){\n      if(err){\n        throw err;\n      }\n      assert.equal(quantity, null, \"Inventory is not as expected\");\n      done();\n    });\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e4988648-6435-4685-8d91-ce8ef44ae839",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update marble inventory for a marble color that does not exist",
                "fullTitle": "Marbles Inventory Manipulation should not update marble inventory for a marble color that does not exist",
                "timedOut": false,
                "duration": 4130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Update marble\nupdateMarble(COLOR, 3, function(err, data, stderr){\n  if(err){\n    throw err\n  } else if (stderr){\n    throw new Error(\"\\nError: \" + stderr);\n  } else {\n  // Strip unwanted whitespace/newline\n    data = data.trim();\n    assert.equal(data, \"+MARB001E Color (\" + COLOR + \") not found in inventory, CREate it.\", \"Unexpected marble update or incorrect error message\");\n    // Marble inventory should be updated\n    getMarbleQuantity(COLOR, function(err, quantity){\n      if(err){\n        throw err;\n      }\n      assert.equal(quantity, null, \"Inventory is not as expected\");\n      done();\n    });\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "67de0b69-209b-433d-aa43-735e3dce991d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84f7b09a-5025-4c9b-a1d8-869ebd31f4b1",
              "e044d7b6-5233-4d93-88c9-d10a14beb01b",
              "cdf73358-259e-4606-a348-dba7ea326bf5",
              "4e2234bb-6e09-4da1-9e53-98e1c9b22022",
              "e4988648-6435-4685-8d91-ce8ef44ae839",
              "67de0b69-209b-433d-aa43-735e3dce991d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27890,
            "root": false,
            "rootEmpty": false,
            "_timeout": 60000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 60000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2021
}